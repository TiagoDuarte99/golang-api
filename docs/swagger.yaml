definitions:
  dto.LoginRequest:
    properties:
      email:
        example: tiago@example.com
        type: string
      password:
        example: SenhaForte123!
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  dto.SignupRequest:
    properties:
      confirm_password:
        example: SenhaForte123!
        minLength: 6
        type: string
      email:
        example: tiago@example.com
        type: string
      name:
        example: Tiago Duarte
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: SenhaForte123!
        minLength: 6
        type: string
      user_type:
        example: USER
        type: string
    required:
    - confirm_password
    - email
    - name
    - password
    - user_type
    type: object
  dto.SuccessMessage:
    properties:
      message:
        type: string
    type: object
  helper.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
      refresh_token:
        type: string
      token:
        type: string
      user_type:
        type: string
    required:
    - email
    - name
    - password
    - user_type
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: This endpoint allows an existing user to login by providing their
        email and password.
      parameters:
      - description: Login credentials
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      summary: User Login
  /users:
    post:
      consumes:
      - application/json
      description: This endpoint allows you to create a new user with the provided
        data.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/dto.SuccessMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "409":
          description: Conflit
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      summary: Create a new user
swagger: "2.0"
